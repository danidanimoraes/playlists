{"version":3,"sources":["resources/spotify-logo.png","App.js","components/featured-playlists.js","resources/no-image.jpg","resources/ifood-logo.PNG","index.js"],"names":["module","exports","App","state","playlists","filteredPlaylists","filters","inputValue","filterHidden","getPlaylistsFromAPI","parameters","new_url","hasParam","parameter","value","fetch","method","headers","Buffer","from","process","toString","body","then","response","json","token_type","access_token","status","errorMessage","concat","items","results","setState","catch","console","log","onSearchPlaylist","event","searchKey","target","length","foundPlaylists","filter","playlist","name","toLowerCase","includes","toggleSearchClass","this","window","selects","country","locale","limit","offset","setInterval","bind","className","src","spotifyLogo","alt","width","ifoodLogo","Component","FeaturedPlaylists","props","currentPlaylists","Array","onSelect","field","object","englishLocaleNames","englishCountryNames","customSelectStyle","option","provided","color","backgroundColor","isFocused","container","marginRight","control","minWidth","border","boxShadow","borderColor","valueContainer","placeholder","singleValue","indicatorSeparator","indicatorContainer","Svg","fill","menu","countryOptions","id","push","label","find","values","forEach","localeOptions","icon","faSearch","type","onChange","title","onClick","faPlus","faMinus","options","styles","defaultValue","data-testid","map","i","key","rel","href","external_urls","spotify","images","url","noImage","owner","display_name","description","replace","logo","height","next","previous","faChevronCircleLeft","faChevronCircleRight","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.28e5627f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spotify-logo.96a319e0.png\";","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport FeaturedPlaylists from \"./components/featured-playlists\";\nimport spotifyLogo from \"./resources/spotify-logo.png\";\nimport ifoodLogo from \"./resources/ifood-logo.PNG\";\n\nclass App extends Component {\n  state = {\n    playlists: [],\n    filteredPlaylists: [],\n    filters: {},\n    inputValue: \"\",\n    filterHidden: true,\n  };\n\n  componentDidMount() {\n    this.getPlaylistsFromAPI();\n\n    fetch(\"http://www.mocky.io/v2/5a25fade2e0000213aa90776\")\n      .then((response) => response.json())\n      .then((json) => {\n        this.setState({\n          filters: json.filters\n        })\n      });\n\n    window.selects = {\n      country: {},\n      locale: {},\n      limit: 20,\n      offset: 0\n    }\n\n    // Refresh every 30 seconds\n    setInterval(this.getPlaylistsFromAPI.bind(this, window.selects), 30000)\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <header>\n          <img src={spotifyLogo} alt=\"spotify logo\" width=\"100\" />\n          <span className=\"app-name\"> SPOT<span className=\"orange\">IF</span><span className=\"red\">OOD</span></span>\n          <img src={ifoodLogo} alt=\"ifood logo\" width=\"100\" className=\"ifood-logo\" />\n        </header>\n        <div className=\"app-body\">\n          <FeaturedPlaylists\n            playlists={this.state.playlists}\n            filteredPlaylists={this.state.filteredPlaylists}\n            filters={this.state.filters}\n            inputValue={this.state.inputValue}\n            onSearchPlaylist={this.onSearchPlaylist}\n            getPlaylistsFromAPI={this.getPlaylistsFromAPI}\n            filterHidden={this.state.filterHidden}\n            toggleSearchClass={this.toggleSearchClass}\n          />\n        </div>\n        <footer className=\"footer\">\n          Data provided by Spotify.\n        </footer>\n      </div>\n    );\n  }\n\n  getPlaylistsFromAPI = (parameters) => {\n    let default_url = \"https://api.spotify.com/v1/browse/featured-playlists\";\n    let new_url = default_url;\n    let hasParam = false;\n\n    if (parameters) {\n      for (let parameter in parameters) {\n        if (parameter !== \"\" && parameters[parameter].value && parameters[parameter].value !== \"\") {\n          if (!hasParam) {\n            new_url = new_url + \"?\";\n          }\n          hasParam = true;\n          new_url = `${new_url}&${parameter}=${parameters[parameter].value}`\n        }\n      }\n    }\n\n    fetch(\"https://accounts.spotify.com/api/token\", {\n      method: \"POST\",\n      headers: {\n        'Authorization': 'Basic ' + (Buffer.from(process.env.REACT_APP_PUBLIC_KEY + ':' + process.env.REACT_APP_PRIVATE_KEY).toString('base64')),\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: [\"grant_type=client_credentials\"]\n    })\n      .then((response) => response.json())\n      .then((json) => {\n        fetch(new_url, {\n          method: \"GET\",\n          headers: {\n            \"Authorization\": json.token_type + \" \" + json.access_token\n          }\n        })\n          .then((response) => {\n            if (response.status === 200) {\n              return response.json()\n            }\n            let errorMessage = \"Error while processing the request.\";\n            switch (response.status) {\n              case 400:\n                errorMessage = errorMessage.concat(\" Try choosing different options for your search.\");\n                break;\n              case 404:\n                errorMessage = \"No results found.\";\n                break;\n              default:\n                break;\n            }\n            return { playlists: { items: [], errorMessage: errorMessage } }\n          })\n          .then((results) => this.setState({\n            playlists: results.playlists,\n            filteredPlaylists: results.playlists,\n          }))\n      })\n      .catch(console.log);\n  }\n\n  onSearchPlaylist = (event) => {\n    let searchKey = event.target.value;\n    this.setState({ inputValue: searchKey });\n\n    if (searchKey.length === 0) {\n      this.setState({ filteredPlaylists: this.state.playlists });\n    } else {\n      const foundPlaylists = this.state.playlists.items.filter((playlist) =>\n        playlist.name.toLowerCase().includes(searchKey.toLowerCase()));\n\n      if (foundPlaylists.length > 0) {\n        this.setState({\n          filteredPlaylists: {\n            items: foundPlaylists\n          },\n        });\n      }\n      else {\n        this.setState({\n          filteredPlaylists: {\n            items: [],\n            errorMessage: \"No results found.\"\n          },\n        });\n      }\n\n    }\n  };\n\n  toggleSearchClass = () => {\n    this.setState({ filterHidden: !this.state.filterHidden });\n  };\n}\nexport default App;\n","import React from \"react\";\r\nimport \"./featured-playlists.scss\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch, faPlus, faMinus, faChevronCircleRight, faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport noImage from \"../resources/no-image.jpg\";\r\nimport logo from \"../resources/spotify-logo.png\";\r\nimport Select from 'react-select';\r\n\r\nconst FeaturedPlaylists = (props) => {\r\n    const currentPlaylists = props.filteredPlaylists.items || [];\r\n    const filters = Array.from(props.filters) || [];\r\n\r\n    const onSelect = (field, object) => {\r\n        window.selects[field] = object;\r\n        props.getPlaylistsFromAPI(window.selects);\r\n    }\r\n    const executeSearch = (event) => {\r\n        props.onSearchPlaylist(event);\r\n    }\r\n\r\n    const englishLocaleNames = {\r\n        \"en_AU\": \"English (Australia)\",\r\n        \"de_DE\": \"German\",\r\n        \"pt_BR\": \"Portuguese (Brazil)\",\r\n        \"fr_FR\": \"French\",\r\n        \"en_US\": \"English (United States)\",\r\n        \"es_AR\": \"Spanish (Argentina)\"\r\n    }\r\n\r\n    const englishCountryNames = {\r\n        \"AU\": \"Australia\",\r\n        \"DE\": \"Germany\",\r\n        \"BR\": \"Brazil\",\r\n        \"PT\": \"Portugal\",\r\n        \"en_US\": \"United States\",\r\n        \"RU\": \"Russia\"\r\n    }\r\n\r\n    const customSelectStyle = {\r\n        option: (provided, state) => ({\r\n            ...provided,\r\n            color: 'black',\r\n            backgroundColor: state.isFocused ? 'rgb(63, 255, 36)' : 'rgb(28, 112, 17)'\r\n        }),\r\n        container: (provided) => ({\r\n            ...provided,\r\n            marginRight: '2rem',\r\n        }),\r\n        control: (provided) => ({\r\n            ...provided,\r\n            width: '100%',\r\n            minWidth: '200px',\r\n            border: '1px solid rgb(28, 112, 17)',\r\n            backgroundColor: 'rgb(28, 112, 17)',\r\n            boxShadow: 'none',\r\n            borderColor: 'rgb(28, 112, 17)',\r\n            '&:hover': {\r\n                borderColor: 'rgb(28, 112, 17)'\r\n            },\r\n        }),\r\n        valueContainer: (provided) => ({\r\n            ...provided,\r\n            width: '100%',\r\n        }),\r\n        placeholder: (provided) => ({\r\n            ...provided,\r\n            color: 'black',\r\n        }),\r\n        singleValue: (provided) => ({\r\n            ...provided,\r\n            color: 'black',\r\n        }),\r\n        indicatorSeparator: (provided) => ({\r\n            ...provided,\r\n            backgroundColor: 'black',\r\n        }),\r\n        indicatorContainer: (provided) => ({\r\n            ...provided,\r\n            color: 'black',\r\n        }),\r\n        Svg: (provided) => ({\r\n            ...provided,\r\n            fill: 'black',\r\n        }),\r\n        menu: (provided) => ({\r\n            ...provided,\r\n            backgroundColor: 'rgb(28, 112, 17)'\r\n        })\r\n    }\r\n\r\n    let countryOptions = [];\r\n    if (filters.filter((option) => option.id === \"country\").length > 0) {\r\n        countryOptions.push({ value: \"\", label: \"All\" })\r\n        filters.find((option) => option.id === \"country\").values.forEach((country) => countryOptions.push({\r\n            value: country.value,\r\n            label: englishCountryNames[country.value] || country.name\r\n        }))\r\n    }\r\n\r\n    let localeOptions = [];\r\n    if (filters.filter((option) => option.id === \"locale\").length > 0) {\r\n        filters.find((option) => option.id === \"locale\").values.forEach((locale) => localeOptions.push({\r\n            value: locale.value,\r\n            label: englishLocaleNames[locale.value] || locale.name\r\n        }))\r\n    }\r\n\r\n    let limitOptions = [\r\n        { value: \"1\", label: \"1\" },\r\n        { value: \"5\", label: \"5\" },\r\n        { value: \"10\", label: \"10\" },\r\n        { value: \"15\", label: \"15\" },\r\n        { value: \"20\", label: \"20\" },\r\n        { value: \"25\", label: \"25\" },\r\n        { value: \"30\", label: \"30\" },\r\n        { value: \"35\", label: \"35\" },\r\n        { value: \"40\", label: \"40\" },\r\n        { value: \"45\", label: \"45\" },\r\n        { value: \"50\", label: \"50\" },\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"search\">\r\n                <div>\r\n                    <FontAwesomeIcon className=\"search-icon\" icon={faSearch} name=\"search icon\" />\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        className=\"search-name\"\r\n                        type=\"text\"\r\n                        value={props.inputValue}\r\n                        onChange={executeSearch}\r\n                        placeholder=\"Search playlist by name\"\r\n                        name=\"search playlist by name\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"search filters-api\">\r\n                <button type=\"button\" title=\"Show more filter options\" className=\"btn more-btn\" onClick={props.toggleSearchClass}>\r\n                    <span className={`${props.filterHidden ? \"show-el-inline\" : \"hide-el\"}`}>\r\n                        <FontAwesomeIcon className=\"plus-icon\" icon={faPlus} /><span className=\"more\">Click for more filter options</span>\r\n                    </span>\r\n                    <span className={`${props.filterHidden ? \"hide-el\" : \"show-el-inline\"}`}>\r\n                        <FontAwesomeIcon className=\"minus-icon\" icon={faMinus} />\r\n                    </span>\r\n                </button>\r\n                <div className={`${props.filterHidden ? \"hide-el\" : \"show-el-flex\"}`}>\r\n                    {filters.filter((option) => option.id === \"country\").length > 0 &&\r\n                        <div name=\"select country\">\r\n                            <span>Country:</span>\r\n                            <Select options={countryOptions} styles={customSelectStyle} onChange={onSelect.bind(this, \"country\")} defaultValue={{ value: \"\", label: \"All\" }} />\r\n                        </div>\r\n                    }\r\n                    {filters.filter((option) => option.id === \"locale\").length > 0 &&\r\n                        <div name=\"select language\">\r\n                            <span>Language:</span>\r\n                            <Select options={localeOptions} styles={customSelectStyle} onChange={onSelect.bind(this, \"locale\")} defaultValue={{ value: \"en_US\", label: \"English (Unites States)\" }} />\r\n                        </div>\r\n                    }\r\n\r\n                    <div name=\"select limit results\">\r\n                        <span>Limit results to: </span>\r\n                        <Select options={limitOptions} styles={customSelectStyle} onChange={onSelect.bind(this, \"limit\")} defaultValue={{ value: \"20\", label: \"20\" }} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {currentPlaylists.length === 0 &&\r\n                <div className=\"no-results\">{props.filteredPlaylists.errorMessage}</div>\r\n            }\r\n            <div className=\"grid\" data-testid=\"grid\">\r\n                {currentPlaylists.map((playlist, i) => (\r\n                    <div className=\"grid-item\" key={`playlist-${i}`}>\r\n                        <div>\r\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href={playlist.external_urls.spotify}>\r\n                                <img key=\"{i}\" alt={playlist.name} src={playlist.images.length > 0 ? playlist.images[0].url : noImage} className=\"img-center image\" title={playlist.name} />\r\n                            </a>\r\n                            <a target=\"_blank\" rel=\"noopener noreferrer\" href={playlist.external_urls.spotify} className=\"title\">\r\n                                {playlist.name}\r\n                            </a>\r\n                            <div className=\"owner\">by {playlist.owner.display_name}</div>\r\n                            {/* Some descriptions were coming with HTML tags*/}\r\n                            <div className=\"description\">{playlist.description.replace(/<[^>]*>/g, '')}</div>\r\n                        </div>\r\n\r\n                        <div className=\"bottom\">\r\n                            {playlist.external_urls && playlist.external_urls.spotify ?\r\n                                <a target=\"_blank\" rel=\"noopener noreferrer\" href={playlist.external_urls.spotify}>\r\n                                    <img alt=\"open playlist on spotify web\" src={logo} width=\"20\" height=\"20\" title=\"Open playlist on Spotify Web\"></img>\r\n                                </a>\r\n                                : \"No URL Available\"}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            {(props.filteredPlaylists.next != null || props.filteredPlaylists.previous != null) &&\r\n                <table>\r\n                    <tbody>\r\n                        <tr className=\"pagination\">\r\n                            {props.filteredPlaylists.previous != null &&\r\n                                <td>\r\n                                    <button onClick={onSelect.bind(this, \"offset\", { value: props.filteredPlaylists.offset - props.filteredPlaylists.limit })}>\r\n                                        Previous <FontAwesomeIcon className=\"page-icon\" icon={faChevronCircleLeft} />\r\n                                    </button>\r\n                                </td>\r\n                            }\r\n                            {props.filteredPlaylists.next != null &&\r\n                                <td>\r\n                                    <button onClick={onSelect.bind(this, \"offset\", { value: props.filteredPlaylists.offset + currentPlaylists.length })}>\r\n                                        <FontAwesomeIcon className=\"page-icon\" icon={faChevronCircleRight} /> Next\r\n                                    </button>\r\n                                </td>\r\n                            }\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FeaturedPlaylists;\r\n","module.exports = __webpack_public_path__ + \"static/media/no-image.c3122a41.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ifood-logo.807fcd77.PNG\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}